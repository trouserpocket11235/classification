# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Classification
                                 A QGIS plugin
 Finding Water and Vegetation via NDVI
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by gkcm
        email                : kristina.maahn@studs.hs-bochum.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis import core, gui

from qgis.core import *
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
from PyQt5 import QtGui, QtCore
from PyQt5.QtCore import *
from PyQt5.QtXml import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .classification_dialog import ClassificationDialog
import os.path


class Classification:
    """QGIS Plugin Implementation."""

    global layerndvi

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.dlg = ClassificationDialog()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Classification_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Classification')
        #self.dlg.ndvi.clear()
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Classification', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.dlg = ClassificationDialog()
        icon_path = ':/plugins/classification/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'&Classification'),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True

    def startNDVI(self):
        #for filename in os.listdir(self.plugin_dir+"/data"):
        #    if (filename[17:-23] == self.dlg.datum.currentText()[:-6]+self.dlg.datum.currentText()[5:-3]+self.dlg.datum.currentText()[8:] and filename[-4:] == ".xml"):
        #        name = filename[:-7]
        #NIR
        #uri = self.plugin_dir+"/data/"+name+"B5.tif"
        #Red
        #uri2 = self.plugin_dir+"/data/"+name+"B4.tif"

        #NIR
        uri = self.dlg.FileNIR.filePath()
        #Red
        uri2 = self.dlg.FileRed.filePath()

        #define short versions of the layernames
        nir = "NIR "#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]
        red = "Red "#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]

        #add Layers NIR and Red to Project
        classification = self.iface.addRasterLayer(uri, nir)
        classification = self.iface.addRasterLayer(uri2, red)

        layer = QgsProject.instance().mapLayersByName(nir)[0]
        layer2 = QgsProject.instance().mapLayersByName(red)[0]

        #RasterLayer to RasterCalculatorEntry
        entries = []
        layernir = QgsRasterCalculatorEntry()
        layernir.ref = 'layernir@1'
        layernir.raster = layer
        layernir.bandNumber = 1
        entries.append(layernir)

        layerred = QgsRasterCalculatorEntry()
        layerred.ref = 'layerred@1'
        layerred.raster = layer2
        layerred.bandNumber = 1
        entries.append(layerred)

        #Calculation NDVI=(NIR-Red)/(NDVI+Red)
        calc = QgsRasterCalculator( '("layernir@1" -  "layerred@1") / ("layernir@1" + "layerred@1")', self.plugin_dir+"/data/_NDVI.tif", 'GTiff', layer.extent(), layer.width(), layer.height(), entries )
        calc.processCalculation()

        #add Layer NDVI
        uri3 = self.plugin_dir+"/data/_NDVI.tif"
        ndvi = "NDVI"#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]
        classification = self.iface.addRasterLayer(uri3, ndvi)
        layerndvi = QgsProject.instance().mapLayersByName(ndvi)[0]
        #Rastershader Object
        s = QgsRasterShader()
        #Ramp Shader
        c = QgsColorRampShader()
        #Interpolatedshader (?)
        c.setColorRampType(QgsColorRampShader.Discrete)
        #stats = layerndvi.dataProvider().bandStatistics(1, QgsRasterBandStats.All)
        i = []
        i.append(QgsColorRampShader.ColorRampItem(0, QtGui.QColor('#00008B'), 'Wasser'))
        #i.append(QgsColorRampShader.ColorRampItem(-0.5, QtGui.QColor(‘#fdae61’), ‘900’))
        i.append(QgsColorRampShader.ColorRampItem(0.3, QtGui.QColor('#999999'), '???'))
        #i.append(QgsColorRampShader.ColorRampItem(0.2, QtGui.QColor(‘#abdda4’), ‘2000’))
        i.append(QgsColorRampShader.ColorRampItem(1, QtGui.QColor('#228B22'), 'Wald'))
        c.setColorRampItemList(i)
        s.setRasterShaderFunction(c)
        ps = QgsSingleBandPseudoColorRenderer(layerndvi.dataProvider(), 1, s)
        layerndvi.setRenderer(ps)
        QgsProject.instance().addMapLayer(layerndvi)
        classification.triggerRepaint()


    def newcolor(self, flag):
        c_water = self.dlg.colorWater.toPlainText()
        c_veg = self.dlg.colorVeg.toPlainText()
        layerndvi = QgsProject.instance().mapLayersByName("NDVI")[0]
        #Rastershader Object
        s = QgsRasterShader()
        #Ramp Shader
        c = QgsColorRampShader()
        #Interpolatedshader (?)
        c.setColorRampType(QgsColorRampShader.Discrete)
        i = []
        i.append(QgsColorRampShader.ColorRampItem((self.dlg.SliderWater.value()/1000), QtGui.QColor(c_water), 'Wasser'))
        i.append(QgsColorRampShader.ColorRampItem((self.dlg.SliderVegetation.value()/1000), QtGui.QColor('#999999'), '???'))
        i.append(QgsColorRampShader.ColorRampItem(1, QtGui.QColor(c_veg), 'Wald'))
        c.setColorRampItemList(i)
        s.setRasterShaderFunction(c)
        ps = QgsSingleBandPseudoColorRenderer(layerndvi.dataProvider(), 1, s)
        layerndvi.setRenderer(ps)
        QgsProject.instance().addMapLayer(layerndvi)
        layerndvi.triggerRepaint()

    def updateLabel_Water(self, value):
        self.dlg.label_Water.setText(str(value/1000))

    def updateLabel_Veg(self, value):
        self.dlg.label_Veg.setText(str(value/1000))


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Classification'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ClassificationDialog()
            self.dlg.startndvi.clicked.connect(self.startNDVI)
            self.dlg.label_Water.setText("0")
            self.dlg.SliderWater.valueChanged.connect(self.updateLabel_Water)
            self.dlg.label_Veg.setText("0.3")
            self.dlg.SliderVegetation.valueChanged.connect(self.updateLabel_Veg)
            self.dlg.color.clicked.connect(self.newcolor)
            self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            pass
