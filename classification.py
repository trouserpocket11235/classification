# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Classification
                                 A QGIS plugin
 Finding Water and Vegetation via NDVI
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by gkcm
        email                : kristina.maahn@studs.hs-bochum.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis import core, gui

from qgis.core import *
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
from PyQt5 import QtGui, QtCore
from PyQt5.QtCore import *
from PyQt5.QtXml import *
from PyQt5.QtWidgets import QApplication

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .classification_dialog import ClassificationDialog
import os.path
import processing


class Classification:
    """QGIS Plugin Implementation."""

    global layerndvi

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.dlg = ClassificationDialog()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Classification_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Classification')
        #self.dlg.ndvi.clear()
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Classification', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.dlg = ClassificationDialog()
        icon_path = ':/plugins/classification/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'&Classification'),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True

    def startNDVI(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        #NIR
        uri = self.dlg.fileNIR.filePath()
        #Red
        uri2 = self.dlg.fileRed.filePath()

        #define short versions of the layernames
        #to do: if Landsat 8, Landsat 7, ...
        nir = "NIR"#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]
        red = "Red"#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]

        #add Layers NIR and Red to Project
        classification = self.iface.addRasterLayer(uri, nir)
        classification = self.iface.addRasterLayer(uri2, red)

        layer = QgsProject.instance().mapLayersByName(nir)[0]
        layer2 = QgsProject.instance().mapLayersByName(red)[0]

        if self.dlg.checkndvi.isChecked():
            folder_path = self.dlg.savendvi.filePath()
            uri3 = os.path.join(folder_path,"NDVI.tif")

            entries = []
            layernir = QgsRasterCalculatorEntry()
            layernir.ref = 'layernir@1'
            layernir.raster = layer
            layernir.bandNumber = 1
            entries.append(layernir)

            layerred = QgsRasterCalculatorEntry()
            layerred.ref = 'layerred@1'
            layerred.raster = layer2
            layerred.bandNumber = 1
            entries.append(layerred)

            #Calculation NDVI=(NIR-Red)/(NDVI+Red)
            calc = QgsRasterCalculator( '((("layernir@1" -  "layerred@1") / ("layernir@1" + "layerred@1"))+1)*100', uri3, 'GTiff', layer.extent(), layer.width(), layer.height(), entries )
            calc.processCalculation()
            #add Layer NDVI
            ndviname = "NDVI"#+name[17:-20]+"-"+name[21:-18]+"-"+name[23:-16]
            layerndvi = self.iface.addRasterLayer(uri3, ndviname)
            ndvi = QgsProject.instance().mapLayersByName(ndviname)[0]
        else:
            #Hier muss ich den Raster Calculator aus der Toolbox benutzen, sonst ist kein temporärer Layer möglich.
            #Calculation NDVI=(NIR-Red)/(NDVI+Red)
            ndvi_single = processing.runAndLoadResults("qgis:rastercalculator", {
                    'CELLSIZE' : 0,
                    'CRS' : None,
                    'EXPRESSION' : '( ( ( \"NIR@1\" - \"Red@1\" ) / ( \"NIR@1\" + \"Red@1\" ) ) + 1 ) * 100',
                    'EXTENT' : None,
                    'LAYERS' : ["NIR"],
                    'OUTPUT' : 'TEMPORARY_OUTPUT' } )

            ndvi = QgsProject.instance().mapLayersByName("Output")[0]
            ndvi.setName('NDVI')

        #Rastershader Object
        s = QgsRasterShader()
        #Ramp Shader
        c = QgsColorRampShader()
        c.setColorRampType(QgsColorRampShader.Discrete)
        i = []
        i.append(QgsColorRampShader.ColorRampItem(100, QtGui.QColor('#00008B'), 'Wasser'))
        i.append(QgsColorRampShader.ColorRampItem(130, QtGui.QColor('#999999'), '???'))
        i.append(QgsColorRampShader.ColorRampItem(200, QtGui.QColor('#228B22'), 'Wald'))
        c.setColorRampItemList(i)
        s.setRasterShaderFunction(c)
        ps = QgsSingleBandPseudoColorRenderer(ndvi.dataProvider(), 1, s)
        ndvi.setRenderer(ps)
        QgsProject.instance().addMapLayer(ndvi)
        ndvi.triggerRepaint()
        QApplication.restoreOverrideCursor()

    def ladeDatei(self):

        #NIR
        uri = self.dlg.file_single.filePath()
        name = "Ausgangsdaten"
        classification = self.iface.addRasterLayer(uri, name)
        singlelayer = QgsProject.instance().mapLayersByName(name)[0]
        i = singlelayer.bandCount()
        for j in range(i):
            self.dlg.combo_red.addItem("Band " + str(j+1))
            self.dlg.combo_nir.addItem("Band " + str(j+1))


    def startNDVI_single(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)

        #NIR
        band_nir = int(self.dlg.combo_nir.currentText()[-1])
        #Red
        band_red = int(self.dlg.combo_red.currentText()[-1])

        layer = QgsProject.instance().mapLayersByName("Ausgangsdaten")[0]

        if self.dlg.checkndvi_single.isChecked():
            folder_path = self.dlg.savendvi_single.filePath()
            uri = os.path.join(folder_path,"NDVI.tif")

            entries = []
            layernir = QgsRasterCalculatorEntry()
            layernir.ref = 'layernir@1'
            layernir.raster = layer
            layernir.bandNumber = band_nir
            entries.append(layernir)

            layerred = QgsRasterCalculatorEntry()
            layerred.ref = 'layerred@1'
            layerred.raster = layer
            layerred.bandNumber = band_red
            entries.append(layerred)
            #Calculation NDVI=(NIR-Red)/(NDVI+Red)
            calc = QgsRasterCalculator( '((("layernir@1" -  "layerred@1") / ("layernir@1" + "layerred@1"))+1)*100', uri, 'GTiff', layer.extent(), layer.width(), layer.height(), entries )
            calc.processCalculation()

            #add Layer NDVI
            ndviname = "NDVI"
            layerndvi = self.iface.addRasterLayer(uri, ndviname)
            ndvi = QgsProject.instance().mapLayersByName(ndviname)[0]

        else:
            #Hier muss ich den Raster Calculator aus der Toolbox benutzen, sonst ist kein temporärer Layer möglich.
            #Calculation NDVI=(NIR-Red)/(NDVI+Red)
            ndvi_single = processing.runAndLoadResults("qgis:rastercalculator", {
                    'CELLSIZE' : 0,
                    'CRS' : None,
                    'EXPRESSION' : '( ( ( \"Ausgangsdaten@{0}\" - \"Ausgangsdaten@{1}\" ) / ( \"Ausgangsdaten@{0}\" + \"Ausgangsdaten@{1}\" ) ) + 1 ) * 100'.format(band_nir, band_red),
                    'EXTENT' : None,
                    'LAYERS' : ["Ausgangsdaten"],
                    'OUTPUT' : 'TEMPORARY_OUTPUT' } )

            ndvi = QgsProject.instance().mapLayersByName("Output")[0]
            ndvi.setName('NDVI')

        #Rastershader Object
        s = QgsRasterShader()
        #Ramp Shader
        c = QgsColorRampShader()
        c.setColorRampType(QgsColorRampShader.Discrete)
        i = []
        i.append(QgsColorRampShader.ColorRampItem(100, QtGui.QColor('#00008B'), 'Wasser'))
        i.append(QgsColorRampShader.ColorRampItem(130, QtGui.QColor('#999999'), '???'))
        i.append(QgsColorRampShader.ColorRampItem(200, QtGui.QColor('#228B22'), 'Wald'))
        c.setColorRampItemList(i)
        s.setRasterShaderFunction(c)
        ps = QgsSingleBandPseudoColorRenderer(ndvi.dataProvider(), 1, s)
        ndvi.setRenderer(ps)
        QgsProject.instance().addMapLayer(ndvi)
        ndvi.triggerRepaint()
        QApplication.restoreOverrideCursor()

    def reset(self):
        #Farbeinstellungen resetten
        self.dlg.SliderWater.setValue(0)
        self.dlg.SliderVegetation.setValue(30)
        self.dlg.colorWater.setToDefaultColor()
        self.dlg.colorVeg.setToDefaultColor()

    def newcolor(self, flag):
        #Farbwerte abfragen
        c_water = self.dlg.colorWater.color()
        c_veg = self.dlg.colorVeg.color()

        layerndvi = QgsProject.instance().mapLayersByName("NDVI")[0]
        #Rastershader Object
        s = QgsRasterShader()
        #Ramp Shader
        c = QgsColorRampShader()
        c.setColorRampType(QgsColorRampShader.Discrete)
        i = []
        i.append(QgsColorRampShader.ColorRampItem((self.dlg.SliderWater.value()+100), QtGui.QColor(c_water), 'Wasser'))
        i.append(QgsColorRampShader.ColorRampItem((self.dlg.SliderVegetation.value()+100), QtGui.QColor('#999999'), '???'))
        i.append(QgsColorRampShader.ColorRampItem(200, QtGui.QColor(c_veg), 'Wald'))
        c.setColorRampItemList(i)
        s.setRasterShaderFunction(c)
        ps = QgsSingleBandPseudoColorRenderer(layerndvi.dataProvider(), 1, s)
        layerndvi.setRenderer(ps)
        QgsProject.instance().addMapLayer(layerndvi)
        layerndvi.triggerRepaint()

    def updateLabel_Water(self, value):
        #Label von Wasser mit dem Slider Updaten. Slider kann nur Integer, also durch 100
        self.dlg.label_Water.setText(str(value/100))

    def updateLabel_Veg(self, value):
        #Label von Vegetation mit dem Slider Updaten. Slider kann nur Integer, also durch 100
        self.dlg.label_Veg.setText(str(value/100))

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Classification'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #Nicht mehr der erste Start
            self.first_start = False
            #benutze self.dlg für den Plugin Dialog
            self.dlg = ClassificationDialog()

            #Tab 1 konfigurieren, Ordner zum speichern auswählen, Start Button definieren
            self.dlg.savendvi.setStorageMode(1)
            self.dlg.startndvi.clicked.connect(self.startNDVI)

            #Tab 2 konfigurieren, Laden der einzelnen Datei, Ordner zum speichern auswählen, Start Button definieren
            self.dlg.ladeDatei.clicked.connect(self.ladeDatei)
            self.dlg.savendvi_single.setStorageMode(1)
            self.dlg.startndvi_single.clicked.connect(self.startNDVI_single)

            #Farbeinstellungen konfigurieren,
            self.dlg.reset.clicked.connect(self.reset)
            self.dlg.label_Water.setText("0")
            self.dlg.SliderWater.valueChanged.connect(self.updateLabel_Water)
            self.dlg.label_Veg.setText("0.3")
            self.dlg.SliderVegetation.valueChanged.connect(self.updateLabel_Veg)
            self.dlg.color.clicked.connect(self.newcolor)

            #Ergebnisoptionen konfigurieren
            self.dlg.ergebnis.setStorageMode(1)

            #Fenster immer im Vordergrund bis OK oder Abbrechen
            self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            QApplication.setOverrideCursor(Qt.WaitCursor)
            layer = QgsProject.instance().mapLayersByName("NDVI")[0]

            if self.dlg.checkergebnis.isChecked():
                ergeb_path = self.dlg.ergebnis.filePath()
                uri = os.path.join(ergeb_path,"Mask.tif")

                entries = []
                layerndvi = QgsRasterCalculatorEntry()
                layerndvi.ref = 'layerndvi@1'
                layerndvi.raster = layer
                layerndvi.bandNumber = 1
                entries.append(layerndvi)

                calc = QgsRasterCalculator( '(("layerndvi@1" < ({0}+100))*1+("layerndvi@1" > ({1}+100))*2)'.format(self.dlg.SliderWater.value(), self.dlg.SliderVegetation.value()), uri, 'GTiff', layer.extent(), layer.width(), layer.height(), entries )
                calc.processCalculation()
                mask = "Mask"
                classification = self.iface.addRasterLayer(uri, mask)
                mask = QgsProject.instance().mapLayersByName(mask)[0]

            else:
                #Hier muss ich den Raster Calculator aus der Toolbox benutzen, sonst ist kein temporärer Layer möglich.
                #Calculation NDVI=(NIR-Red)/(NDVI+Red)
                mask_calc = processing.runAndLoadResults("qgis:rastercalculator", {
                        'CELLSIZE' : 0,
                        'CRS' : None,
                        'EXPRESSION' : ' ( ( \"NDVI@1\" < ( {0} + 100 ) ) * 1 + ( \"NDVI@1\" > ( {1} + 100 ) ) * 2 )'.format(self.dlg.SliderWater.value(), self.dlg.SliderVegetation.value()),
                        'EXTENT' : None,
                        'LAYERS' : ["NDVI"],
                        'OUTPUT' : 'TEMPORARY_OUTPUT' } )

                mask = QgsProject.instance().mapLayersByName("Output")[0]
                mask.setName('Mask')

            #Farbwerte abfragen
            c_water = self.dlg.colorWater.color()
            c_veg = self.dlg.colorVeg.color()

            #Rastershader Object
            s = QgsRasterShader()
            #Ramp Shader
            c = QgsColorRampShader()
            c.setColorRampType(QgsColorRampShader.Discrete)
            i = []
            i.append(QgsColorRampShader.ColorRampItem(0, QtGui.QColor('#999999'), '???????'))
            i.append(QgsColorRampShader.ColorRampItem(1, QtGui.QColor(c_water), 'Wasser'))
            i.append(QgsColorRampShader.ColorRampItem(2, QtGui.QColor(c_veg), 'Wald'))
            c.setColorRampItemList(i)
            s.setRasterShaderFunction(c)
            ps = QgsSingleBandPseudoColorRenderer(mask.dataProvider(), 1, s)
            mask.setRenderer(ps)
            QgsProject.instance().addMapLayer(mask)
            mask.triggerRepaint()
            QApplication.restoreOverrideCursor()

            pass
